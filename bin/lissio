#! /usr/bin/env ruby

if File.exists?('Gemfile')
	require 'bundler'
	Bundler.require
end

require 'thor'
require 'rack'
require 'fileutils'
require 'yaml'

require 'lissio'

class CLI < Thor
	desc "new [PATH]", "create a new lissio application"

	option :adapter, type: :string
	option :components, type: :string

	def new(path = '.')
		FileUtils.mkpath path
		FileUtils.cd path do
			FileUtils.mkdir 'app'
			FileUtils.mkdir 'css'
			FileUtils.mkdir 'js'
			FileUtils.mkdir 'img'
			FileUtils.mkdir 'fonts'

			File.open 'index.html.erb', 'w' do |f|
				f.puts <<-HTML.gsub(/^\t+/, '')
					<!DOCTYPE html>
					<html>
					<head>
					  <meta charset="utf-8">
					  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
					  <title>Vai col lissio!</title>
					
					  <%= lissio 'app' %>
					</head>
					<body>
					</body>
					</html>
				HTML
			end

			File.open 'app/app.rb', 'w' do |f|
				f.puts <<-RUBY.gsub(/^\t+/, '')
					require 'opal'
					require 'lissio'

					class Application < Lissio::Application
					  def initialize
					    super

					    route '/' do
					      alert "hello"
					    end
					  end

					  html do
					    div "Vai col lissio!"
					  end

					  css do
					    rule 'body' do
					      font size: 42.px
					      text align: :center
					    end
					  end
					end
				RUBY
			end
		end
	end

	desc "start", "start the lissio server"

	option :server,  aliases: '-S', type: :string
	option :port,    aliases: '-p', type: :numeric
	option :host,                   type: :string
	option :main,    aliases: '-m', type: :string, default: 'app'
	option :require, aliases: '-r', type: :array, default: []
	option :use,     aliases: '-u', type: :array, default: []
	option :path,                   type: :array, default: ['app', 'js', 'opal']
	option :static,  aliases: '-s', type: :array, default: ['/css', '/fonts', '/img']
	option :index,   aliases: '-i', type: :string
	option :debug,   aliases: '-d', type: :boolean

	def start
		options = prepare

		Rack::Server.start(
			Host:   options[:host] || '0.0.0.0',
			Port:   options[:port] || 9292,
			server: options[:server],

			app: Lissio::Server.new {|s|
				options[:path].each {|path|
					s.append_path path
				}

				s.static = options[:static]

				if main = options[:main]
					s.main = main
				end

				if index = options[:index]
					s.index_path = index
				end

				if options[:debug]
					s.debug = true
				end
			})
	end

	desc "build [PATH]", "create a server-less distribution of the application"

	option :main,    aliases: '-m', type: :string
	option :require, aliases: '-r', type: :array, default: []
	option :use,     aliases: '-u', type: :array, default: []
	option :path,                   type: :array, default: ['app', 'js', 'opal']
	option :force,   aliases: '-f', type: :boolean, default: false

	def build(output = 'lissio.js')
		if !options[:force] && File.exists?(output)
			raise ArgumentError, "'#{output}' already exists"
		end

		options = prepare

		File.open output, 'w' do |f|
			builder = Lissio::Builder.new {|b|
				options[:path].each {|path|
					b.append_path path
				}

				if main = options[:main]
					b.main = main
				end

				if index = options[:index]
					b.index = index
				end
			}

			f.write builder.build
		end
	end

private
	def prepare
		options = self.options.dup

		if File.readable? 'lissio.yml'
			YAML.load_file('lissio.yml').tap {|opts|
				%w[server port host index debug main].each {|name|
					if opts.has_key?(name) && !options.has_key?(name)
						options[name] = opts[name]
					end
				}

				%w[use require path static].each {|name|
					if opts.has_key? name
						options[name] = Array(opts[name])
					end
				}
			}
		end

		options[:require].each {|r|
			require r
		}

		options[:use].each {|u|
			Opal.use_gem u
		}

		options
	end
end

CLI.start(ARGV)
